---
name: daily-gpu-inspection
display_name: GPU 节点每日巡检
description: 每日检查 GPU 节点的使用率、告警与网络可达性
version: v2
created_by: system

# -------------------------------
# 模板执行计划：每天上午 9 点
# -------------------------------
schedule:
  cron: "0 9 * * *"
  description: 每日 9 点巡检
  enabled: true

# -------------------------------
# 全局默认时间范围（可被指标、变量覆盖）
# -------------------------------
time_range: 1h

# -------------------------------
# 标签：便于分类管理
# -------------------------------
tags: [ gpu, daily ]

# -------------------------------
# 目标设备集合：从元数据中查询
# -------------------------------
target_registry:
  source: metadata
  query:
    entity_type: gpu_node
    region: "{{.Region}}"  # region 变量注入 dataCenterId?

# 全局变量定义，如果indicator中定义了，则会被覆盖
vars:
  - name: DataCenterID
    type: string
    required: true
    default_value: "{{.DataCenterID}}"
    description: 数据中心ID

  # TimeRange 是特殊变量：允许用户注入，未注入时 fallback 到 indicator / global
  - name: TimeRange
    type: string
    required: true
    default_value: "{{if .IndicatorTimeRange}}{{.IndicatorTimeRange}}{{else}}{{.GlobalTimeRange}}{{end}}"
    description: 查询时间窗口，如 1h、6h、30m

  - name: ClusterRegex
    type: string
    default_value: "10\\\\.120\\\\.[0-9]+\\\\.[0-9]+.*"
    description: 匹配一组节点实例

  - name: NodeSelector
    type: string
    required: true
    value: "{{.ClusterRegex}}"
    description: PromQL instance=~ 匹配表达式

# -------------------------------
# 巡检指标定义
# -------------------------------
indicators:

  # ---------------------------
  # GPU 使用率指标（Prometheus）
  # ---------------------------
  - name: GPU 使用率
    enabled: true # 未指定 enabled 时，默认开启
    source: prometheus
    exporter: gpu_exporter #上报此指标的 exporter
    type: range
    description: 节点内所有GPU卡的平均算力利用率（反映整体负载）
    query: |
      avg by (instance) (avg_over_time(nvidia_smi_utilization_gpu_ratio{data_center_id='{{.DataCenterID}}'}[{{.TimeRange}}])) * 100
    # fallback 级别 3：每个指标独立默认时间范围
    time_range: 2h

    vars:
      - name: ClusterRegex
        type: string
        default_value: "node-a[0-9]+"
        description: 匹配一组节点实例

      - name: NodeSelector
        type: string
        required: true
        value: "{{.ClusterRegex}}"
        description: PromQL instance=~ 匹配表达式

    thresholds: # 阈值判断, 支持多个阈值,同级别不允许重复, 按优先级排序, 阈值判断兜底返回 默认值 ok
      - level: critical  # 最高优先级（先判断） 对应的状态级别 允许的值（critical/warning/info)
        value: 90 #阈值数值
        operator: gt # 运算符：gt(>), gte(>=), lt(<), lte(<=), eq(==)
      - level: warning   # 次高优先级
        value: 70
        operator: gt
      - level: info
        value: 60
        operator: gt
    required: true

    display:
      type: table
      unit: "%"
      group_by: instance
      summary_mode: count_by_status
      missing_indicator: true
      page_size: 20
      fields:
        - { name: target, label: 节点 }
        - { name: value,  label: 利用率 }
        - { name: status, label: 状态 }
      highlight:
        enabled: true        # 是否启用高亮
        logic: or            # 多条件逻辑关系，支持 and/or，可以不写，默认 or
        limit: all           # 支持 "all"、"top_n"、"bottom_n"
        conditions:          # 支持多条件
          - level: critical  # 支持按级别(可选，如果填写了基本，则会在级别内匹配条件)
            value: 0         # 支持按阈值(可选, value和 operator 必须同时出现)
            operator: eq     # 支持按操作符(可选, value和 operator 必须同时出现) 运算符：gt(>), gte(>=), lt(<), lte(<=), eq(==)
#      # 示例1：高亮所有 critical 级别
#      highlight:
#        enabled: true
#        limit: all
#        conditions:
#          - level: critical
#
#      # 示例2：高亮数值 > 80 的前5个
#      highlight:
#        enabled: true
#        limit: top_5
#        conditions:
#          - value: 80
#            operator: gt
#
#      # 示例3：复合条件（满足任意一个条件）
#      highlight:
#        enabled: true
#        limit: all
#        conditions:
#          - level: warning
#          - value: 70
#            operator: gte
#
#      # 示例3：复合条件（同时满足两个条件）
#      highlight:
#        enabled: true
#        limit: all
#        logic: or            # 多条件逻辑关系，支持 and/or，可以不写，默认 or
#        conditions:
#          - level: warning
#          - value: 70
#            operator: gte

# -------------------------------
# 报告布局
# -------------------------------
report_layout:
  sections:
    - title: 节点资源使用状态
      include: [ "GPU 使用率" ]
    - title: 节点基础健康状态
      Indicators: [ "节点存活状态", "节点平均GPU温度" ] # 需要在上面定义过的Indicator name